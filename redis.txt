To connect to Redis and retrieve a value for a given key in a Spring Boot application, follow these steps:

1. Add Redis Dependency

If youâ€™re using Maven, add this to your pom.xml:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

For Gradle, add this to build.gradle:

implementation 'org.springframework.boot:spring-boot-starter-data-redis'

2. Configure Redis in application.properties

If you are using a local Redis instance, add:

spring.redis.host=localhost
spring.redis.port=6379

For authentication:

spring.redis.password=your_redis_password

If using a Redis cloud service like AWS ElastiCache or Redis Labs:

spring.redis.host=your-redis-host
spring.redis.port=your-redis-port
spring.redis.username=your-username  # (Optional, if Redis requires it)
spring.redis.password=your-redis-password
spring.redis.ssl=true  # If connecting securely

3. Create a Redis Configuration Class

This ensures that RedisTemplate is available for Redis operations.

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig {

    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new StringRedisSerializer());
        return template;
    }
}

4. Create a Service to Interact with Redis

This service provides methods to set and get values from Redis.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

@Service
public class RedisService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    // Save a value
    public void saveValue(String key, String value) {
        redisTemplate.opsForValue().set(key, value);
    }

    // Get a value
    public String getValue(String key) {
        return (String) redisTemplate.opsForValue().get(key);
    }

    // Delete a key
    public void deleteKey(String key) {
        redisTemplate.delete(key);
    }
}

5. Create a REST Controller to Test Redis

This controller allows you to set and get values via HTTP endpoints.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/redis")
public class RedisController {

    @Autowired
    private RedisService redisService;

    @PostMapping("/set")
    public String setValue(@RequestParam String key, @RequestParam String value) {
        redisService.saveValue(key, value);
        return "Saved!";
    }

    @GetMapping("/get")
    public String getValue(@RequestParam String key) {
        String value = redisService.getValue(key);
        return value != null ? value : "Key not found!";
    }
}

6. Run and Test

Start your Spring Boot application and test with:

Set a Value

curl -X POST "http://localhost:8080/redis/set?key=testKey&value=HelloRedis"

Get a Value

curl -X GET "http://localhost:8080/redis/get?key=testKey"

Expected Output

HelloRedis

7. Optional: Use Redis CLI to Verify

If Redis is running locally, you can manually check:

redis-cli
127.0.0.1:6379> GET testKey
"HelloRedis"

This will successfully connect your Spring Boot app to Redis and allow you to store & retrieve data. Let me know if you need more customizations! ðŸš€