Given a user’s natural language prompt, identify the agents to be executed and whether each agent is to be run independently (Self) or based on the result of another agent (Cascade). Return the result as a list of dictionaries with keys: Agent_Name and Execution_Instruction. Do not explain—just return the list.


def health_check_agent():
    return "Health: 3 servers overutilized, 1 underutilized."

def forecast_agent():
    return "Forecast: CPU load will exceed 80% in next 30 minutes."

def anomaly_detection_agent():
    return "Anomaly Detected: Response time spike in App3."

def select_agents_from_prompt(user_prompt, agent_list):
    prompt = f"""
You are an agent selector. Available agents are:
{', '.join(agent_list)}.

User has asked: "{user_prompt}"

Return a Python list of agents to execute. Only include agent names from the list above. Example: ['health_check_agent', 'forecast_agent']
"""

    response = model.generate_content(prompt)
    return eval(response.text)  # ⚠️ Safe only if you control the output structure

AGENT_FUNCTIONS = {
    "health_check_agent": health_check_agent,
    "forecast_agent": forecast_agent,
    "anomaly_detection_agent": anomaly_detection_agent
}

def run_selected_agents(agent_names):
    results = {}
    for name in agent_names:
        func = AGENT_FUNCTIONS.get(name)
        if func:
            results[name] = func()
    return results

user_prompt = "Tell me the health and future usage of my application"
available_agents = list(AGENT_FUNCTIONS.keys())

selected = select_agents_from_prompt(user_prompt, available_agents)
print("Selected Agents:", selected)

output = run_selected_agents(selected)
print("Agent Responses:\n", output)